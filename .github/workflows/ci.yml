name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  release:
    types: [created]

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Required SDKs
      - name: Install .NET SDK ${{ vars.DOTNET_SDK_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.DOTNET_SDK_VERSION }}
        env:
          DOTNET_INSTALL_DIR: /usr/share/dotnet

      # NuGet Setup
      - name: Add GitHub Nuget Source
        run: dotnet nuget add source --username DrBarnabus --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name "GitHub" "https://nuget.pkg.github.com/DrBarnabus/index.json"

      # GitVersion
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: 5.x
      - name: Execute GitVersion
        uses: gittools/actions/gitversion/execute@v0.10.2
        id: gitversion

      # Cache
      - name: Cache .nuget
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
            ${{ runner.os }}-nuget-

      # Build & Test
      - name: Restore
        run: dotnet restore --locked-mode
      - name: Build
        run: dotnet build -c Release --no-restore -p:PackageVersion=${{ steps.gitversion.outputs.semVer }}
      - name: Test
        run: dotnet test -c Release --no-restore --no-build --collect:"XPlat Code Coverage"
      - name: Pack
        run: dotnet pack src/Mimic -c Release --no-restore --no-build -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} -o _output

      # Push to GitHub Packages or NuGet
      - name: Push to GitHub Packages
        if: github.event_name != 'pull_request'
        run: dotnet nuget push _output/*.nupkg --source "GitHub" --api-key ${{ secrets.GITHUB_TOKEN }}
      - name: Push to NuGet
        if: github.event_name == 'release' && github.event.action == 'created'
        run: dotnet nuget push _output/*.nupkg --soruce https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
